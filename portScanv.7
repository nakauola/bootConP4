import socket
import ipaddress
import nmap
import subprocess
import shlex
from concurrent.futures import ThreadPoolExecutor, as_completed

def scan_port(target_ip, port):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        result = s.connect_ex((str(target_ip), port))
        s.close()
        return port if result == 0 else None
    except Exception as e:
        print(f"Error scanning port {port}: {e}")
        return None

def scan_ports(target_ip, start_port, end_port):
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        future_to_port = {executor.submit(scan_port, target_ip, port): port for port in range(start_port, end_port + 1)}
        for future in as_completed(future_to_port):
            port = future_to_port[future]
            if future.result():
                open_ports.append(port)
    return open_ports

def scan_ports_nmap(target_ip, start_port, end_port):
    open_ports = []
    try:
        nm = nmap.PortScanner()
        nm.scan(hosts=str(target_ip), arguments=f"-p {start_port}-{end_port} -sS")
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    if nm[host][proto][port]['state'] == 'open':
                        open_ports.append(port)
    except Exception as e:
        print(f"Error scanning ports with Nmap: {e}")
    return open_ports

def get_service_name(port):
    try:
        service_name = socket.getservbyport(port)
        return service_name
    except OSError:
        return "Unknown"

def netstat_scan():
    try:
        command = ["netstat", "-tuln"]
        sanitized_command = [shlex.quote(arg) for arg in command]
        netstat_output = subprocess.check_output(sanitized_command)
        netstat_output = netstat_output.decode("utf-8")
        lines = netstat_output.split("\n")
        print("Proto    Local Address         Foreign Address           State")
        for line in lines:
            print(line)
    except Exception as e:
        print(f"Error executing netstat command: {e}")
        return None

if __name__ == "__main__":
    try:
        target_ip = ipaddress.ip_address(input("Enter the target IP address: "))
        start_port = int(input("Enter the starting port: "))
        end_port = int(input("Enter the ending port: "))
        print("Starting scan, go get yourself a coffee")
        
        # Scan ports using socket
        open_ports = scan_ports(target_ip, start_port, end_port)
        
        # Alternatively, scan ports using nmap
        # open_ports = scan_ports_nmap(target_ip, start_port, end_port)
        
        if open_ports:
            print("Open ports:")
            for port in open_ports:
                service_name = get_service_name(port)
                print(f"Port: {port}, Service: {service_name}")
        else:
            print("No open ports found.")
        
        # Call netstat_scan to perform the scan
        netstat_output = netstat_scan()
        if netstat_output:
            print("Netstat Output:")
            print(netstat_output)
    except ValueError:
        print("Invalid IP address or port number.")
